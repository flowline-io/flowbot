// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/flowline-io/flowbot/internal/store/model"
)

func newPlatformChannelUser(db *gorm.DB, opts ...gen.DOOption) platformChannelUser {
	_platformChannelUser := platformChannelUser{}

	_platformChannelUser.platformChannelUserDo.UseDB(db, opts...)
	_platformChannelUser.platformChannelUserDo.UseModel(&model.PlatformChannelUser{})

	tableName := _platformChannelUser.platformChannelUserDo.TableName()
	_platformChannelUser.ALL = field.NewAsterisk(tableName)
	_platformChannelUser.ID = field.NewInt64(tableName, "id")
	_platformChannelUser.PlatformID = field.NewInt64(tableName, "platform_id")
	_platformChannelUser.ChannelFlag = field.NewString(tableName, "channel_flag")
	_platformChannelUser.UserFlag = field.NewString(tableName, "user_flag")
	_platformChannelUser.CreatedAt = field.NewTime(tableName, "created_at")
	_platformChannelUser.UpdatedAt = field.NewTime(tableName, "updated_at")

	_platformChannelUser.fillFieldMap()

	return _platformChannelUser
}

type platformChannelUser struct {
	platformChannelUserDo

	ALL         field.Asterisk
	ID          field.Int64
	PlatformID  field.Int64
	ChannelFlag field.String
	UserFlag    field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (p platformChannelUser) Table(newTableName string) *platformChannelUser {
	p.platformChannelUserDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p platformChannelUser) As(alias string) *platformChannelUser {
	p.platformChannelUserDo.DO = *(p.platformChannelUserDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *platformChannelUser) updateTableName(table string) *platformChannelUser {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.PlatformID = field.NewInt64(table, "platform_id")
	p.ChannelFlag = field.NewString(table, "channel_flag")
	p.UserFlag = field.NewString(table, "user_flag")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *platformChannelUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *platformChannelUser) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["platform_id"] = p.PlatformID
	p.fieldMap["channel_flag"] = p.ChannelFlag
	p.fieldMap["user_flag"] = p.UserFlag
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p platformChannelUser) clone(db *gorm.DB) platformChannelUser {
	p.platformChannelUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p platformChannelUser) replaceDB(db *gorm.DB) platformChannelUser {
	p.platformChannelUserDo.ReplaceDB(db)
	return p
}

type platformChannelUserDo struct{ gen.DO }

func (p platformChannelUserDo) Debug() *platformChannelUserDo {
	return p.withDO(p.DO.Debug())
}

func (p platformChannelUserDo) WithContext(ctx context.Context) *platformChannelUserDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p platformChannelUserDo) ReadDB() *platformChannelUserDo {
	return p.Clauses(dbresolver.Read)
}

func (p platformChannelUserDo) WriteDB() *platformChannelUserDo {
	return p.Clauses(dbresolver.Write)
}

func (p platformChannelUserDo) Session(config *gorm.Session) *platformChannelUserDo {
	return p.withDO(p.DO.Session(config))
}

func (p platformChannelUserDo) Clauses(conds ...clause.Expression) *platformChannelUserDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p platformChannelUserDo) Returning(value interface{}, columns ...string) *platformChannelUserDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p platformChannelUserDo) Not(conds ...gen.Condition) *platformChannelUserDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p platformChannelUserDo) Or(conds ...gen.Condition) *platformChannelUserDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p platformChannelUserDo) Select(conds ...field.Expr) *platformChannelUserDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p platformChannelUserDo) Where(conds ...gen.Condition) *platformChannelUserDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p platformChannelUserDo) Order(conds ...field.Expr) *platformChannelUserDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p platformChannelUserDo) Distinct(cols ...field.Expr) *platformChannelUserDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p platformChannelUserDo) Omit(cols ...field.Expr) *platformChannelUserDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p platformChannelUserDo) Join(table schema.Tabler, on ...field.Expr) *platformChannelUserDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p platformChannelUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *platformChannelUserDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p platformChannelUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *platformChannelUserDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p platformChannelUserDo) Group(cols ...field.Expr) *platformChannelUserDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p platformChannelUserDo) Having(conds ...gen.Condition) *platformChannelUserDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p platformChannelUserDo) Limit(limit int) *platformChannelUserDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p platformChannelUserDo) Offset(offset int) *platformChannelUserDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p platformChannelUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *platformChannelUserDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p platformChannelUserDo) Unscoped() *platformChannelUserDo {
	return p.withDO(p.DO.Unscoped())
}

func (p platformChannelUserDo) Create(values ...*model.PlatformChannelUser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p platformChannelUserDo) CreateInBatches(values []*model.PlatformChannelUser, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p platformChannelUserDo) Save(values ...*model.PlatformChannelUser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p platformChannelUserDo) First() (*model.PlatformChannelUser, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlatformChannelUser), nil
	}
}

func (p platformChannelUserDo) Take() (*model.PlatformChannelUser, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlatformChannelUser), nil
	}
}

func (p platformChannelUserDo) Last() (*model.PlatformChannelUser, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlatformChannelUser), nil
	}
}

func (p platformChannelUserDo) Find() ([]*model.PlatformChannelUser, error) {
	result, err := p.DO.Find()
	return result.([]*model.PlatformChannelUser), err
}

func (p platformChannelUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlatformChannelUser, err error) {
	buf := make([]*model.PlatformChannelUser, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p platformChannelUserDo) FindInBatches(result *[]*model.PlatformChannelUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p platformChannelUserDo) Attrs(attrs ...field.AssignExpr) *platformChannelUserDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p platformChannelUserDo) Assign(attrs ...field.AssignExpr) *platformChannelUserDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p platformChannelUserDo) Joins(fields ...field.RelationField) *platformChannelUserDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p platformChannelUserDo) Preload(fields ...field.RelationField) *platformChannelUserDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p platformChannelUserDo) FirstOrInit() (*model.PlatformChannelUser, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlatformChannelUser), nil
	}
}

func (p platformChannelUserDo) FirstOrCreate() (*model.PlatformChannelUser, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlatformChannelUser), nil
	}
}

func (p platformChannelUserDo) FindByPage(offset int, limit int) (result []*model.PlatformChannelUser, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p platformChannelUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p platformChannelUserDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p platformChannelUserDo) Delete(models ...*model.PlatformChannelUser) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *platformChannelUserDo) withDO(do gen.Dao) *platformChannelUserDo {
	p.DO = *do.(*gen.DO)
	return p
}
