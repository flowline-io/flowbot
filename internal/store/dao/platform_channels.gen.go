// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/flowline-io/flowbot/internal/store/model"
)

func newPlatformChannel(db *gorm.DB, opts ...gen.DOOption) platformChannel {
	_platformChannel := platformChannel{}

	_platformChannel.platformChannelDo.UseDB(db, opts...)
	_platformChannel.platformChannelDo.UseModel(&model.PlatformChannel{})

	tableName := _platformChannel.platformChannelDo.TableName()
	_platformChannel.ALL = field.NewAsterisk(tableName)
	_platformChannel.ID = field.NewInt64(tableName, "id")
	_platformChannel.PlatformID = field.NewInt64(tableName, "platform_id")
	_platformChannel.ChannelID = field.NewInt64(tableName, "channel_id")
	_platformChannel.Flag = field.NewString(tableName, "flag")
	_platformChannel.CreatedAt = field.NewTime(tableName, "created_at")
	_platformChannel.UpdatedAt = field.NewTime(tableName, "updated_at")

	_platformChannel.fillFieldMap()

	return _platformChannel
}

type platformChannel struct {
	platformChannelDo

	ALL        field.Asterisk
	ID         field.Int64
	PlatformID field.Int64
	ChannelID  field.Int64
	Flag       field.String
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (p platformChannel) Table(newTableName string) *platformChannel {
	p.platformChannelDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p platformChannel) As(alias string) *platformChannel {
	p.platformChannelDo.DO = *(p.platformChannelDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *platformChannel) updateTableName(table string) *platformChannel {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.PlatformID = field.NewInt64(table, "platform_id")
	p.ChannelID = field.NewInt64(table, "channel_id")
	p.Flag = field.NewString(table, "flag")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *platformChannel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *platformChannel) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["platform_id"] = p.PlatformID
	p.fieldMap["channel_id"] = p.ChannelID
	p.fieldMap["flag"] = p.Flag
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p platformChannel) clone(db *gorm.DB) platformChannel {
	p.platformChannelDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p platformChannel) replaceDB(db *gorm.DB) platformChannel {
	p.platformChannelDo.ReplaceDB(db)
	return p
}

type platformChannelDo struct{ gen.DO }

func (p platformChannelDo) Debug() *platformChannelDo {
	return p.withDO(p.DO.Debug())
}

func (p platformChannelDo) WithContext(ctx context.Context) *platformChannelDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p platformChannelDo) ReadDB() *platformChannelDo {
	return p.Clauses(dbresolver.Read)
}

func (p platformChannelDo) WriteDB() *platformChannelDo {
	return p.Clauses(dbresolver.Write)
}

func (p platformChannelDo) Session(config *gorm.Session) *platformChannelDo {
	return p.withDO(p.DO.Session(config))
}

func (p platformChannelDo) Clauses(conds ...clause.Expression) *platformChannelDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p platformChannelDo) Returning(value interface{}, columns ...string) *platformChannelDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p platformChannelDo) Not(conds ...gen.Condition) *platformChannelDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p platformChannelDo) Or(conds ...gen.Condition) *platformChannelDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p platformChannelDo) Select(conds ...field.Expr) *platformChannelDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p platformChannelDo) Where(conds ...gen.Condition) *platformChannelDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p platformChannelDo) Order(conds ...field.Expr) *platformChannelDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p platformChannelDo) Distinct(cols ...field.Expr) *platformChannelDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p platformChannelDo) Omit(cols ...field.Expr) *platformChannelDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p platformChannelDo) Join(table schema.Tabler, on ...field.Expr) *platformChannelDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p platformChannelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *platformChannelDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p platformChannelDo) RightJoin(table schema.Tabler, on ...field.Expr) *platformChannelDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p platformChannelDo) Group(cols ...field.Expr) *platformChannelDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p platformChannelDo) Having(conds ...gen.Condition) *platformChannelDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p platformChannelDo) Limit(limit int) *platformChannelDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p platformChannelDo) Offset(offset int) *platformChannelDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p platformChannelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *platformChannelDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p platformChannelDo) Unscoped() *platformChannelDo {
	return p.withDO(p.DO.Unscoped())
}

func (p platformChannelDo) Create(values ...*model.PlatformChannel) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p platformChannelDo) CreateInBatches(values []*model.PlatformChannel, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p platformChannelDo) Save(values ...*model.PlatformChannel) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p platformChannelDo) First() (*model.PlatformChannel, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlatformChannel), nil
	}
}

func (p platformChannelDo) Take() (*model.PlatformChannel, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlatformChannel), nil
	}
}

func (p platformChannelDo) Last() (*model.PlatformChannel, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlatformChannel), nil
	}
}

func (p platformChannelDo) Find() ([]*model.PlatformChannel, error) {
	result, err := p.DO.Find()
	return result.([]*model.PlatformChannel), err
}

func (p platformChannelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlatformChannel, err error) {
	buf := make([]*model.PlatformChannel, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p platformChannelDo) FindInBatches(result *[]*model.PlatformChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p platformChannelDo) Attrs(attrs ...field.AssignExpr) *platformChannelDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p platformChannelDo) Assign(attrs ...field.AssignExpr) *platformChannelDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p platformChannelDo) Joins(fields ...field.RelationField) *platformChannelDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p platformChannelDo) Preload(fields ...field.RelationField) *platformChannelDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p platformChannelDo) FirstOrInit() (*model.PlatformChannel, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlatformChannel), nil
	}
}

func (p platformChannelDo) FirstOrCreate() (*model.PlatformChannel, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlatformChannel), nil
	}
}

func (p platformChannelDo) FindByPage(offset int, limit int) (result []*model.PlatformChannel, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p platformChannelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p platformChannelDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p platformChannelDo) Delete(models ...*model.PlatformChannel) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *platformChannelDo) withDO(do gen.Dao) *platformChannelDo {
	p.DO = *do.(*gen.DO)
	return p
}
