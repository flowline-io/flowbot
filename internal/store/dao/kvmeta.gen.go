// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/flowline-io/flowbot/internal/store/model"
)

func newKvmetum(db *gorm.DB, opts ...gen.DOOption) kvmetum {
	_kvmetum := kvmetum{}

	_kvmetum.kvmetumDo.UseDB(db, opts...)
	_kvmetum.kvmetumDo.UseModel(&model.Kvmetum{})

	tableName := _kvmetum.kvmetumDo.TableName()
	_kvmetum.ALL = field.NewAsterisk(tableName)
	_kvmetum.Key = field.NewString(tableName, "key")
	_kvmetum.Createdat = field.NewTime(tableName, "createdat")
	_kvmetum.Value = field.NewString(tableName, "value")

	_kvmetum.fillFieldMap()

	return _kvmetum
}

type kvmetum struct {
	kvmetumDo

	ALL       field.Asterisk
	Key       field.String
	Createdat field.Time
	Value     field.String

	fieldMap map[string]field.Expr
}

func (k kvmetum) Table(newTableName string) *kvmetum {
	k.kvmetumDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k kvmetum) As(alias string) *kvmetum {
	k.kvmetumDo.DO = *(k.kvmetumDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *kvmetum) updateTableName(table string) *kvmetum {
	k.ALL = field.NewAsterisk(table)
	k.Key = field.NewString(table, "key")
	k.Createdat = field.NewTime(table, "createdat")
	k.Value = field.NewString(table, "value")

	k.fillFieldMap()

	return k
}

func (k *kvmetum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *kvmetum) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 3)
	k.fieldMap["key"] = k.Key
	k.fieldMap["createdat"] = k.Createdat
	k.fieldMap["value"] = k.Value
}

func (k kvmetum) clone(db *gorm.DB) kvmetum {
	k.kvmetumDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k kvmetum) replaceDB(db *gorm.DB) kvmetum {
	k.kvmetumDo.ReplaceDB(db)
	return k
}

type kvmetumDo struct{ gen.DO }

func (k kvmetumDo) Debug() *kvmetumDo {
	return k.withDO(k.DO.Debug())
}

func (k kvmetumDo) WithContext(ctx context.Context) *kvmetumDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k kvmetumDo) ReadDB() *kvmetumDo {
	return k.Clauses(dbresolver.Read)
}

func (k kvmetumDo) WriteDB() *kvmetumDo {
	return k.Clauses(dbresolver.Write)
}

func (k kvmetumDo) Session(config *gorm.Session) *kvmetumDo {
	return k.withDO(k.DO.Session(config))
}

func (k kvmetumDo) Clauses(conds ...clause.Expression) *kvmetumDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k kvmetumDo) Returning(value interface{}, columns ...string) *kvmetumDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k kvmetumDo) Not(conds ...gen.Condition) *kvmetumDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k kvmetumDo) Or(conds ...gen.Condition) *kvmetumDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k kvmetumDo) Select(conds ...field.Expr) *kvmetumDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k kvmetumDo) Where(conds ...gen.Condition) *kvmetumDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k kvmetumDo) Order(conds ...field.Expr) *kvmetumDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k kvmetumDo) Distinct(cols ...field.Expr) *kvmetumDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k kvmetumDo) Omit(cols ...field.Expr) *kvmetumDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k kvmetumDo) Join(table schema.Tabler, on ...field.Expr) *kvmetumDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k kvmetumDo) LeftJoin(table schema.Tabler, on ...field.Expr) *kvmetumDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k kvmetumDo) RightJoin(table schema.Tabler, on ...field.Expr) *kvmetumDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k kvmetumDo) Group(cols ...field.Expr) *kvmetumDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k kvmetumDo) Having(conds ...gen.Condition) *kvmetumDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k kvmetumDo) Limit(limit int) *kvmetumDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k kvmetumDo) Offset(offset int) *kvmetumDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k kvmetumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *kvmetumDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k kvmetumDo) Unscoped() *kvmetumDo {
	return k.withDO(k.DO.Unscoped())
}

func (k kvmetumDo) Create(values ...*model.Kvmetum) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k kvmetumDo) CreateInBatches(values []*model.Kvmetum, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k kvmetumDo) Save(values ...*model.Kvmetum) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k kvmetumDo) First() (*model.Kvmetum, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kvmetum), nil
	}
}

func (k kvmetumDo) Take() (*model.Kvmetum, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kvmetum), nil
	}
}

func (k kvmetumDo) Last() (*model.Kvmetum, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kvmetum), nil
	}
}

func (k kvmetumDo) Find() ([]*model.Kvmetum, error) {
	result, err := k.DO.Find()
	return result.([]*model.Kvmetum), err
}

func (k kvmetumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Kvmetum, err error) {
	buf := make([]*model.Kvmetum, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k kvmetumDo) FindInBatches(result *[]*model.Kvmetum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k kvmetumDo) Attrs(attrs ...field.AssignExpr) *kvmetumDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k kvmetumDo) Assign(attrs ...field.AssignExpr) *kvmetumDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k kvmetumDo) Joins(fields ...field.RelationField) *kvmetumDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k kvmetumDo) Preload(fields ...field.RelationField) *kvmetumDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k kvmetumDo) FirstOrInit() (*model.Kvmetum, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kvmetum), nil
	}
}

func (k kvmetumDo) FirstOrCreate() (*model.Kvmetum, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kvmetum), nil
	}
}

func (k kvmetumDo) FindByPage(offset int, limit int) (result []*model.Kvmetum, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k kvmetumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k kvmetumDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k kvmetumDo) Delete(models ...*model.Kvmetum) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *kvmetumDo) withDO(do gen.Dao) *kvmetumDo {
	k.DO = *do.(*gen.DO)
	return k
}
