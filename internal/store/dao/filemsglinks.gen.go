// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/flowline-io/flowbot/internal/store/model"
)

func newFilemsglink(db *gorm.DB, opts ...gen.DOOption) filemsglink {
	_filemsglink := filemsglink{}

	_filemsglink.filemsglinkDo.UseDB(db, opts...)
	_filemsglink.filemsglinkDo.UseModel(&model.Filemsglink{})

	tableName := _filemsglink.filemsglinkDo.TableName()
	_filemsglink.ALL = field.NewAsterisk(tableName)
	_filemsglink.ID = field.NewInt32(tableName, "id")
	_filemsglink.Createdat = field.NewTime(tableName, "createdat")
	_filemsglink.Fileid = field.NewInt64(tableName, "fileid")
	_filemsglink.Msgid = field.NewInt32(tableName, "msgid")
	_filemsglink.Topic = field.NewString(tableName, "topic")
	_filemsglink.Userid = field.NewInt64(tableName, "userid")

	_filemsglink.fillFieldMap()

	return _filemsglink
}

type filemsglink struct {
	filemsglinkDo

	ALL       field.Asterisk
	ID        field.Int32
	Createdat field.Time
	Fileid    field.Int64
	Msgid     field.Int32
	Topic     field.String
	Userid    field.Int64

	fieldMap map[string]field.Expr
}

func (f filemsglink) Table(newTableName string) *filemsglink {
	f.filemsglinkDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f filemsglink) As(alias string) *filemsglink {
	f.filemsglinkDo.DO = *(f.filemsglinkDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *filemsglink) updateTableName(table string) *filemsglink {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Createdat = field.NewTime(table, "createdat")
	f.Fileid = field.NewInt64(table, "fileid")
	f.Msgid = field.NewInt32(table, "msgid")
	f.Topic = field.NewString(table, "topic")
	f.Userid = field.NewInt64(table, "userid")

	f.fillFieldMap()

	return f
}

func (f *filemsglink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *filemsglink) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["createdat"] = f.Createdat
	f.fieldMap["fileid"] = f.Fileid
	f.fieldMap["msgid"] = f.Msgid
	f.fieldMap["topic"] = f.Topic
	f.fieldMap["userid"] = f.Userid
}

func (f filemsglink) clone(db *gorm.DB) filemsglink {
	f.filemsglinkDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f filemsglink) replaceDB(db *gorm.DB) filemsglink {
	f.filemsglinkDo.ReplaceDB(db)
	return f
}

type filemsglinkDo struct{ gen.DO }

func (f filemsglinkDo) Debug() *filemsglinkDo {
	return f.withDO(f.DO.Debug())
}

func (f filemsglinkDo) WithContext(ctx context.Context) *filemsglinkDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f filemsglinkDo) ReadDB() *filemsglinkDo {
	return f.Clauses(dbresolver.Read)
}

func (f filemsglinkDo) WriteDB() *filemsglinkDo {
	return f.Clauses(dbresolver.Write)
}

func (f filemsglinkDo) Session(config *gorm.Session) *filemsglinkDo {
	return f.withDO(f.DO.Session(config))
}

func (f filemsglinkDo) Clauses(conds ...clause.Expression) *filemsglinkDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f filemsglinkDo) Returning(value interface{}, columns ...string) *filemsglinkDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f filemsglinkDo) Not(conds ...gen.Condition) *filemsglinkDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f filemsglinkDo) Or(conds ...gen.Condition) *filemsglinkDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f filemsglinkDo) Select(conds ...field.Expr) *filemsglinkDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f filemsglinkDo) Where(conds ...gen.Condition) *filemsglinkDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f filemsglinkDo) Order(conds ...field.Expr) *filemsglinkDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f filemsglinkDo) Distinct(cols ...field.Expr) *filemsglinkDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f filemsglinkDo) Omit(cols ...field.Expr) *filemsglinkDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f filemsglinkDo) Join(table schema.Tabler, on ...field.Expr) *filemsglinkDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f filemsglinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) *filemsglinkDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f filemsglinkDo) RightJoin(table schema.Tabler, on ...field.Expr) *filemsglinkDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f filemsglinkDo) Group(cols ...field.Expr) *filemsglinkDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f filemsglinkDo) Having(conds ...gen.Condition) *filemsglinkDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f filemsglinkDo) Limit(limit int) *filemsglinkDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f filemsglinkDo) Offset(offset int) *filemsglinkDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f filemsglinkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *filemsglinkDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f filemsglinkDo) Unscoped() *filemsglinkDo {
	return f.withDO(f.DO.Unscoped())
}

func (f filemsglinkDo) Create(values ...*model.Filemsglink) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f filemsglinkDo) CreateInBatches(values []*model.Filemsglink, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f filemsglinkDo) Save(values ...*model.Filemsglink) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f filemsglinkDo) First() (*model.Filemsglink, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Filemsglink), nil
	}
}

func (f filemsglinkDo) Take() (*model.Filemsglink, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Filemsglink), nil
	}
}

func (f filemsglinkDo) Last() (*model.Filemsglink, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Filemsglink), nil
	}
}

func (f filemsglinkDo) Find() ([]*model.Filemsglink, error) {
	result, err := f.DO.Find()
	return result.([]*model.Filemsglink), err
}

func (f filemsglinkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Filemsglink, err error) {
	buf := make([]*model.Filemsglink, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f filemsglinkDo) FindInBatches(result *[]*model.Filemsglink, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f filemsglinkDo) Attrs(attrs ...field.AssignExpr) *filemsglinkDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f filemsglinkDo) Assign(attrs ...field.AssignExpr) *filemsglinkDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f filemsglinkDo) Joins(fields ...field.RelationField) *filemsglinkDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f filemsglinkDo) Preload(fields ...field.RelationField) *filemsglinkDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f filemsglinkDo) FirstOrInit() (*model.Filemsglink, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Filemsglink), nil
	}
}

func (f filemsglinkDo) FirstOrCreate() (*model.Filemsglink, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Filemsglink), nil
	}
}

func (f filemsglinkDo) FindByPage(offset int, limit int) (result []*model.Filemsglink, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f filemsglinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f filemsglinkDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f filemsglinkDo) Delete(models ...*model.Filemsglink) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *filemsglinkDo) withDO(do gen.Dao) *filemsglinkDo {
	f.DO = *do.(*gen.DO)
	return f
}
