// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/flowline-io/flowbot/internal/store/model"
)

func newAction(db *gorm.DB, opts ...gen.DOOption) action {
	_action := action{}

	_action.actionDo.UseDB(db, opts...)
	_action.actionDo.UseModel(&model.Action{})

	tableName := _action.actionDo.TableName()
	_action.ALL = field.NewAsterisk(tableName)
	_action.ID = field.NewInt64(tableName, "id")
	_action.UID = field.NewString(tableName, "uid")
	_action.Topic = field.NewString(tableName, "topic")
	_action.Seqid = field.NewInt32(tableName, "seqid")
	_action.Value = field.NewString(tableName, "value")
	_action.State = field.NewField(tableName, "state")
	_action.CreatedAt = field.NewTime(tableName, "created_at")
	_action.UpdatedAt = field.NewTime(tableName, "updated_at")

	_action.fillFieldMap()

	return _action
}

type action struct {
	actionDo

	ALL       field.Asterisk
	ID        field.Int64
	UID       field.String
	Topic     field.String
	Seqid     field.Int32
	Value     field.String
	State     field.Field
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (a action) Table(newTableName string) *action {
	a.actionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a action) As(alias string) *action {
	a.actionDo.DO = *(a.actionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *action) updateTableName(table string) *action {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.UID = field.NewString(table, "uid")
	a.Topic = field.NewString(table, "topic")
	a.Seqid = field.NewInt32(table, "seqid")
	a.Value = field.NewString(table, "value")
	a.State = field.NewField(table, "state")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *action) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *action) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["uid"] = a.UID
	a.fieldMap["topic"] = a.Topic
	a.fieldMap["seqid"] = a.Seqid
	a.fieldMap["value"] = a.Value
	a.fieldMap["state"] = a.State
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a action) clone(db *gorm.DB) action {
	a.actionDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a action) replaceDB(db *gorm.DB) action {
	a.actionDo.ReplaceDB(db)
	return a
}

type actionDo struct{ gen.DO }

// GetByID
//
// SELECT  * FROM @@table WHERE id=@id
func (a actionDo) GetByID(id int) (result model.Action, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM action WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// TakeByUidAndTopic query data by uid and topic and return one
//
// where("uid=@uid  AND topic=@topic")
func (a actionDo) TakeByUidAndTopic(uid string, topic string) (result model.Action, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, uid)
	params = append(params, topic)
	generateSQL.WriteString("uid=? AND topic=? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Where(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// FindByUidAndTopic query data by uid and topic and return array
//
// where("uid=@uid  AND topic=@topic")
func (a actionDo) FindByUidAndTopic(uid string, topic string) (result []*model.Action, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, uid)
	params = append(params, topic)
	generateSQL.WriteString("uid=? AND topic=? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Where(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a actionDo) Debug() *actionDo {
	return a.withDO(a.DO.Debug())
}

func (a actionDo) WithContext(ctx context.Context) *actionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a actionDo) ReadDB() *actionDo {
	return a.Clauses(dbresolver.Read)
}

func (a actionDo) WriteDB() *actionDo {
	return a.Clauses(dbresolver.Write)
}

func (a actionDo) Session(config *gorm.Session) *actionDo {
	return a.withDO(a.DO.Session(config))
}

func (a actionDo) Clauses(conds ...clause.Expression) *actionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a actionDo) Returning(value interface{}, columns ...string) *actionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a actionDo) Not(conds ...gen.Condition) *actionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a actionDo) Or(conds ...gen.Condition) *actionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a actionDo) Select(conds ...field.Expr) *actionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a actionDo) Where(conds ...gen.Condition) *actionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a actionDo) Order(conds ...field.Expr) *actionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a actionDo) Distinct(cols ...field.Expr) *actionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a actionDo) Omit(cols ...field.Expr) *actionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a actionDo) Join(table schema.Tabler, on ...field.Expr) *actionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a actionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *actionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a actionDo) RightJoin(table schema.Tabler, on ...field.Expr) *actionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a actionDo) Group(cols ...field.Expr) *actionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a actionDo) Having(conds ...gen.Condition) *actionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a actionDo) Limit(limit int) *actionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a actionDo) Offset(offset int) *actionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a actionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *actionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a actionDo) Unscoped() *actionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a actionDo) Create(values ...*model.Action) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a actionDo) CreateInBatches(values []*model.Action, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a actionDo) Save(values ...*model.Action) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a actionDo) First() (*model.Action, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Action), nil
	}
}

func (a actionDo) Take() (*model.Action, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Action), nil
	}
}

func (a actionDo) Last() (*model.Action, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Action), nil
	}
}

func (a actionDo) Find() ([]*model.Action, error) {
	result, err := a.DO.Find()
	return result.([]*model.Action), err
}

func (a actionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Action, err error) {
	buf := make([]*model.Action, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a actionDo) FindInBatches(result *[]*model.Action, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a actionDo) Attrs(attrs ...field.AssignExpr) *actionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a actionDo) Assign(attrs ...field.AssignExpr) *actionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a actionDo) Joins(fields ...field.RelationField) *actionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a actionDo) Preload(fields ...field.RelationField) *actionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a actionDo) FirstOrInit() (*model.Action, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Action), nil
	}
}

func (a actionDo) FirstOrCreate() (*model.Action, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Action), nil
	}
}

func (a actionDo) FindByPage(offset int, limit int) (result []*model.Action, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a actionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a actionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a actionDo) Delete(models ...*model.Action) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *actionDo) withDO(do gen.Dao) *actionDo {
	a.DO = *do.(*gen.DO)
	return a
}
