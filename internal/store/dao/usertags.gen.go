// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/sysatom/flowbot/internal/store/model"
)

func newUsertag(db *gorm.DB, opts ...gen.DOOption) usertag {
	_usertag := usertag{}

	_usertag.usertagDo.UseDB(db, opts...)
	_usertag.usertagDo.UseModel(&model.Usertag{})

	tableName := _usertag.usertagDo.TableName()
	_usertag.ALL = field.NewAsterisk(tableName)
	_usertag.ID = field.NewInt32(tableName, "id")
	_usertag.Userid = field.NewInt64(tableName, "userid")
	_usertag.Tag = field.NewString(tableName, "tag")

	_usertag.fillFieldMap()

	return _usertag
}

type usertag struct {
	usertagDo

	ALL    field.Asterisk
	ID     field.Int32
	Userid field.Int64
	Tag    field.String

	fieldMap map[string]field.Expr
}

func (u usertag) Table(newTableName string) *usertag {
	u.usertagDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u usertag) As(alias string) *usertag {
	u.usertagDo.DO = *(u.usertagDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *usertag) updateTableName(table string) *usertag {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Userid = field.NewInt64(table, "userid")
	u.Tag = field.NewString(table, "tag")

	u.fillFieldMap()

	return u
}

func (u *usertag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *usertag) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["userid"] = u.Userid
	u.fieldMap["tag"] = u.Tag
}

func (u usertag) clone(db *gorm.DB) usertag {
	u.usertagDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u usertag) replaceDB(db *gorm.DB) usertag {
	u.usertagDo.ReplaceDB(db)
	return u
}

type usertagDo struct{ gen.DO }

func (u usertagDo) Debug() *usertagDo {
	return u.withDO(u.DO.Debug())
}

func (u usertagDo) WithContext(ctx context.Context) *usertagDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u usertagDo) ReadDB() *usertagDo {
	return u.Clauses(dbresolver.Read)
}

func (u usertagDo) WriteDB() *usertagDo {
	return u.Clauses(dbresolver.Write)
}

func (u usertagDo) Session(config *gorm.Session) *usertagDo {
	return u.withDO(u.DO.Session(config))
}

func (u usertagDo) Clauses(conds ...clause.Expression) *usertagDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u usertagDo) Returning(value interface{}, columns ...string) *usertagDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u usertagDo) Not(conds ...gen.Condition) *usertagDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u usertagDo) Or(conds ...gen.Condition) *usertagDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u usertagDo) Select(conds ...field.Expr) *usertagDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u usertagDo) Where(conds ...gen.Condition) *usertagDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u usertagDo) Order(conds ...field.Expr) *usertagDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u usertagDo) Distinct(cols ...field.Expr) *usertagDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u usertagDo) Omit(cols ...field.Expr) *usertagDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u usertagDo) Join(table schema.Tabler, on ...field.Expr) *usertagDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u usertagDo) LeftJoin(table schema.Tabler, on ...field.Expr) *usertagDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u usertagDo) RightJoin(table schema.Tabler, on ...field.Expr) *usertagDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u usertagDo) Group(cols ...field.Expr) *usertagDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u usertagDo) Having(conds ...gen.Condition) *usertagDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u usertagDo) Limit(limit int) *usertagDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u usertagDo) Offset(offset int) *usertagDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u usertagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *usertagDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u usertagDo) Unscoped() *usertagDo {
	return u.withDO(u.DO.Unscoped())
}

func (u usertagDo) Create(values ...*model.Usertag) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u usertagDo) CreateInBatches(values []*model.Usertag, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u usertagDo) Save(values ...*model.Usertag) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u usertagDo) First() (*model.Usertag, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Usertag), nil
	}
}

func (u usertagDo) Take() (*model.Usertag, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Usertag), nil
	}
}

func (u usertagDo) Last() (*model.Usertag, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Usertag), nil
	}
}

func (u usertagDo) Find() ([]*model.Usertag, error) {
	result, err := u.DO.Find()
	return result.([]*model.Usertag), err
}

func (u usertagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Usertag, err error) {
	buf := make([]*model.Usertag, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u usertagDo) FindInBatches(result *[]*model.Usertag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u usertagDo) Attrs(attrs ...field.AssignExpr) *usertagDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u usertagDo) Assign(attrs ...field.AssignExpr) *usertagDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u usertagDo) Joins(fields ...field.RelationField) *usertagDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u usertagDo) Preload(fields ...field.RelationField) *usertagDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u usertagDo) FirstOrInit() (*model.Usertag, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Usertag), nil
	}
}

func (u usertagDo) FirstOrCreate() (*model.Usertag, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Usertag), nil
	}
}

func (u usertagDo) FindByPage(offset int, limit int) (result []*model.Usertag, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u usertagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u usertagDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u usertagDo) Delete(models ...*model.Usertag) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *usertagDo) withDO(do gen.Dao) *usertagDo {
	u.DO = *do.(*gen.DO)
	return u
}
