package {{ .BotName }}

import (
    "encoding/json"
    "errors"
    "github.com/sysatom/flowbot/internal/bots"
    "github.com/sysatom/flowbot/internal/types"
    "github.com/sysatom/flowbot/pkg/logs"
    {{if .HasCron}}serverTypes "github.com/sysatom/flowbot/tstore/types"{{end}}
)

const Name = "{{ .BotName }}"

var handler bot

func init() {
    bots.Register(Name, &handler)
}

type bot struct {
    initialized bool
    bots.Base
}

type configType struct {
    Enabled bool `json:"enabled"`
}

func (bot) Init(jsonconf json.RawMessage) error {

    // Check if the handler is already initialized
    if handler.initialized {
        return errors.New("already initialized")
    }

    var config configType
    if err := json.Unmarshal(jsonconf, &config); err != nil {
        return errors.New("failed to parse config: " + err.Error())
    }

    if !config.Enabled {
        logs.Info.Printf("bot %s disabled", Name)
        return nil
    }

    handler.initialized = true

    return nil
}

func (bot) IsReady() bool {
    return handler.initialized
}
{{if .HasInput}}
func (b bot) Input(_ types.Context, _ types.KV, _ interface{}) (types.MsgPayload, error) {
    return nil, nil
}
{{end}}
{{if .HasGroup}}
func (b bot) Group(ctx types.Context, head types.KV, content interface{}) (types.MsgPayload, error) {
    return bots.RunGroup(eventRules, ctx, head, content)
}
{{end}}
{{if .HasCommand}}
func (b bot) Command(ctx types.Context, content interface{}) (types.MsgPayload, error) {
    return bots.RunCommand(commandRules, ctx, content)
}
{{end}}
{{if .HasForm}}
func (b bot) Form(ctx types.Context, values types.KV) (types.MsgPayload, error) {
    return bots.RunForm(formRules, ctx, values)
}
{{end}}
{{if .HasAction}}
func (b bot) Action(ctx types.Context, option string) (types.MsgPayload, error) {
    return bots.RunAction(actionRules, ctx, option)
}
{{end}}
{{if .HasCron}}
func (b bot) Cron(send func(rcptTo string, uid serverTypes.Uid, out types.MsgPayload)) error {
    return bots.RunCron(cronRules, Name, b.AuthLevel(), send)
}
{{end}}
{{if .HasCondition}}
func (b bot) Condition(ctx types.Context, forwarded types.MsgPayload) (types.MsgPayload, error) {
    return bots.RunCondition(conditionRules, ctx, forwarded)
}
{{end}}
{{if .HasAgent}}
func (b bot) Agent(ctx types.Context, content interface{}) (types.MsgPayload, error) {
    return bots.RunAgent(agentRules, ctx, content)
}
{{end}}
{{if .HasSession}}
func (b bot) Session(ctx types.Context, content interface{}) (types.MsgPayload, error) {
    return bots.RunSession(sessionRules, ctx, content)
}
{{end}}
