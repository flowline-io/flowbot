package {{ .BotName }}

import (
    "encoding/json"
    "errors"
    "github.com/flowline-io/flowbot/internal/bots"
    "github.com/flowline-io/flowbot/internal/types"
    "github.com/flowline-io/flowbot/pkg/flog"
    {{if .HasCron}}"github.com/flowline-io/flowbot/internal/ruleset/cron"{{end}}
)

const Name = "{{ .BotName }}"

var handler bot

func init() {
    bots.Register(Name, &handler)
}

type bot struct {
    initialized bool
    bots.Base
}

type configType struct {
    Enabled bool `json:"enabled"`
}

func (bot) Init(jsonconf json.RawMessage) error {

    // Check if the handler is already initialized
    if handler.initialized {
        return errors.New("already initialized")
    }

    var config configType
    if err := json.Unmarshal(jsonconf, &config); err != nil {
        return errors.New("failed to parse config: " + err.Error())
    }

    if !config.Enabled {
        flog.Info("bot %s disabled", Name)
        return nil
    }

    handler.initialized = true

    return nil
}

func (bot) IsReady() bool {
    return handler.initialized
}

func (bot) Bootstrap() error {
	return nil
}

func (b bot) Rules() []interface{} {
	return []interface{}{
		commandRules,
		{{if .HasForm}}formRules,{{end}}
		{{if .HasAgent}}agentRules,{{end}}
		{{if .HasInstruct}}instructRules,{{end}}
	}
}

{{if .HasInput}}
func (b bot) Input(_ types.Context, _ types.KV, _ interface{}) (types.MsgPayload, error) {
    return nil, nil
}
{{end}}
{{if .HasCommand}}
func (b bot) Command(ctx types.Context, content interface{}) (types.MsgPayload, error) {
    return bots.RunCommand(commandRules, ctx, content)
}
{{end}}
{{if .HasForm}}
func (b bot) Form(ctx types.Context, values types.KV) (types.MsgPayload, error) {
    return bots.RunForm(formRules, ctx, values)
}
{{end}}
{{if .HasCron}}
func (b bot) Cron(send types.SendFunc) (*cron.Ruleset, error) {
    return bots.RunCron(cronRules, Name, send)
}
{{end}}
{{if .HasAgent}}
func (b bot) Agent(ctx types.Context, content types.KV) (types.MsgPayload, error) {
    return bots.RunAgent(AgentVersion, agentRules, ctx, content)
}
{{end}}
